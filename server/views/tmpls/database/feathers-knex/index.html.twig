{% extends 'layouts/sidebar.html.twig' %}

{% block sidebar_content %}
    <article class="markdown-body entry-content" itemprop="text">
        <h1><a href="#feathers-knex" aria-hidden="true" class="anchor" id="user-content-feathers-knex">
                <svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16"
                     width="16">
                    <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
                </svg>
            </a>feathers-knex
        </h1>
        <p>A database adapter for <a href="http://knexjs.org/" rel="nofollow">KnexJS</a>, an SQL query builder for
            Postgres, MSSQL, MySQL, MariaDB, SQLite3, and Oracle.</p>
        <div class="highlight highlight-source-shell">
            <pre><code class="hljs">npm install --save mysql knex feathers-knex</code></pre>
        </div>
        <blockquote>
            <p><strong>Important:</strong> <code>feathers-knex</code> implements the <a
                        href="https://docs.feathersjs.com/api/databases/common.html" rel="nofollow">Feathers Common
                    database adapter API</a> and <a href="https://docs.feathersjs.com/api/databases/querying.html"
                                                    rel="nofollow">querying syntax</a>.</p>
        </blockquote>

        <blockquote>
            <p><strong>Note:</strong> You also need to <a href="http://knexjs.org/#Installation-node" rel="nofollow">install
                    the database driver</a> for the DB you want to use.</p>
        </blockquote>
        <h2><a href="#api" aria-hidden="true" class="anchor" id="user-content-api">
                <svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16"
                     width="16">
                    <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
                </svg>
            </a>API
        </h2>
        <h3><a href="#serviceoptions" aria-hidden="true" class="anchor" id="user-content-serviceoptions">
                <svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16"
                     width="16">
                    <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
                </svg>
            </a><code>service(options)</code></h3>
        <p>Returns a new service instance initialized with the given options.</p>
        <div class="highlight highlight-source-js"><pre><code class="hljs"><span class="pl-k">const</span> <span class="pl-c1">knex</span> <span
                        class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span
                            class="pl-pds">'</span>knex<span class="pl-pds">'</span></span>);
<span class="pl-k">const</span> <span class="pl-c1">service</span> <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span
                        class="pl-s"><span class="pl-pds">'</span>feathers-knex<span class="pl-pds">'</span></span>);

<span class="pl-k">const</span> <span class="pl-c1">db</span> <span class="pl-k">=</span> <span
                        class="pl-en">knex</span>({
  client<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>sqlite3<span class="pl-pds">'</span></span>,
  connection<span class="pl-k">:</span> {
    filename<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>./db.sqlite<span class="pl-pds">'</span></span>
  }
});

<span class="pl-c"><span class="pl-c">//</span> Create the schema</span>
<span class="pl-smi">db</span>.<span class="pl-smi">schema</span>.<span class="pl-en">createTable</span>(<span
                        class="pl-s"><span class="pl-pds">'</span>messages<span class="pl-pds">'</span></span>, <span
                        class="pl-smi">table</span> <span class="pl-k">=&gt;</span> {
  <span class="pl-smi">table</span>.<span class="pl-en">increments</span>(<span class="pl-s"><span
                            class="pl-pds">'</span>id<span class="pl-pds">'</span></span>);
  <span class="pl-smi">table</span>.<span class="pl-en">string</span>(<span class="pl-s"><span class="pl-pds">'</span>text<span
                            class="pl-pds">'</span></span>);
});

<span class="pl-smi">app</span>.<span class="pl-en">use</span>(<span class="pl-s"><span class="pl-pds">'</span>/messages<span
                            class="pl-pds">'</span></span>, <span class="pl-en">service</span>({
  Model<span class="pl-k">:</span> db,
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>messages<span class="pl-pds">'</span></span>
}));
<span class="pl-smi">app</span>.<span class="pl-en">use</span>(<span class="pl-s"><span class="pl-pds">'</span>/messages<span
                                class="pl-pds">'</span></span>, <span class="pl-en">service</span>({ Model, name, id, events, paginate }));</code></pre>
        </div>
        <p><strong>Options:</strong></p>
        <ul>
            <li><code>Model</code> (<strong>required</strong>) - The KnexJS database instance</li>
            <li><code>name</code> (<strong>required</strong>) - The name of the table</li>
            <li><code>id</code> (<em>optional</em>, default: <code>'id'</code>) - The name of the id field property.
            </li>
            <li><code>events</code> (<em>optional</em>) - A list of <a
                        href="https://docs.feathersjs.com/api/events.html#custom-events" rel="nofollow">custom service
                    events</a> sent by this service
            </li>
            <li><code>paginate</code> (<em>optional</em>) - A <a
                        href="https://docs.feathersjs.com/api/databases/common.html#pagination" rel="nofollow">pagination
                    object</a> containing a <code>default</code> and <code>max</code> page size
            </li>
        </ul>
        <h3><a href="#adaptercreatequeryquery" aria-hidden="true" class="anchor"
               id="user-content-adaptercreatequeryquery">
                <svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16"
                     width="16">
                    <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
                </svg>
            </a><code>adapter.createQuery(query)</code></h3>
        <p>Returns a KnexJS query with the <a href="https://docs.feathersjs.com/api/databases/querying.html"
                                              rel="nofollow">common filter criteria</a> (without pagination) applied.
        </p>
        <h3><a href="#paramsknex" aria-hidden="true" class="anchor" id="user-content-paramsknex">
                <svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16"
                     width="16">
                    <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
                </svg>
            </a>params.knex
        </h3>
        <p>When making a <a href="https://docs.feathersjs.com/api/services.html" rel="nofollow">service method</a> call,
            <code>params</code> can contain an <code>knex</code> property which allows to modify the options used to run
            the KnexJS query. See <a href="#customizing-the-query">customizing the query</a> for an example.</p>
        <h2><a href="#example" aria-hidden="true" class="anchor" id="user-content-example">
                <svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16"
                     width="16">
                    <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
                </svg>
            </a>Example
        </h2>
        <p>Here's a complete example of a Feathers server with a <code>messages</code> SQLite service. We are using the
            <a href="http://knexjs.org/#Schema" rel="nofollow">Knex schema builder</a> and <a href="https://sqlite.org/"
                                                                                              rel="nofollow">SQLite</a>
            as the database.</p>
        <pre><code class="hljs">$ npm install @feathersjs/feathers @feathersjs/errors @feathersjs/express @feathersjs/socketio feathers-knex knex sqlite3
</code></pre>
        <p>In <code>app.js</code>:</p>
        <div class="highlight highlight-source-js"><pre><code class="hljs"><span class="pl-k">const</span> <span
                        class="pl-c1">feathers</span> <span class="pl-k">=</span> <span
                        class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>@feathersjs/feathers<span
                            class="pl-pds">'</span></span>);
<span class="pl-k">const</span> <span class="pl-c1">express</span> <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span
                        class="pl-s"><span class="pl-pds">'</span>@feathersjs/express<span
                            class="pl-pds">'</span></span>);
<span class="pl-k">const</span> <span class="pl-c1">socketio</span> <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span
                        class="pl-s"><span class="pl-pds">'</span>@feathersjs/socketio<span
                            class="pl-pds">'</span></span>);

<span class="pl-k">const</span> <span class="pl-c1">service</span> <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span
                        class="pl-s"><span class="pl-pds">'</span>feathers-knex<span class="pl-pds">'</span></span>);
<span class="pl-k">const</span> <span class="pl-c1">knex</span> <span class="pl-k">=</span> <span
                        class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>knex<span
                            class="pl-pds">'</span></span>);

<span class="pl-k">const</span> <span class="pl-c1">db</span> <span class="pl-k">=</span> <span
                        class="pl-en">knex</span>({
  client<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>sqlite3<span class="pl-pds">'</span></span>,
  connection<span class="pl-k">:</span> {
    filename<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>./db.sqlite<span class="pl-pds">'</span></span>
  }
});

<span class="pl-c"><span class="pl-c">//</span> Create a feathers instance.</span>
<span class="pl-k">const</span> <span class="pl-c1">app</span> <span class="pl-k">=</span> <span
                        class="pl-en">express</span>(<span class="pl-en">feathers</span>());
<span class="pl-c"><span class="pl-c">//</span> Turn on JSON parser for REST services</span>
<span class="pl-smi">app</span>.<span class="pl-en">use</span>(<span class="pl-smi">express</span>.<span class="pl-en">json</span>());
<span class="pl-c"><span class="pl-c">//</span> Turn on URL-encoded parser for REST services</span>
<span class="pl-smi">app</span>.<span class="pl-en">use</span>(<span class="pl-smi">express</span>.<span class="pl-en">urlencoded</span>({ extended<span
                        class="pl-k">:</span> <span class="pl-c1">true</span> }));
<span class="pl-c"><span class="pl-c">//</span> Enable REST services</span>
<span class="pl-smi">app</span>.<span class="pl-en">configure</span>(<span class="pl-smi">express</span>.<span
                        class="pl-en">rest</span>());
<span class="pl-c"><span class="pl-c">//</span> Enable Socket.io services</span>
<span class="pl-smi">app</span>.<span class="pl-en">configure</span>(<span class="pl-en">socketio</span>());
<span class="pl-c"><span class="pl-c">//</span> Create Knex Feathers service with a default page size of 2 items</span>
<span class="pl-c"><span class="pl-c">//</span> and a maximum size of 4</span>
<span class="pl-smi">app</span>.<span class="pl-en">use</span>(<span class="pl-s"><span class="pl-pds">'</span>/messages<span
                            class="pl-pds">'</span></span>, <span class="pl-en">service</span>({
  Model<span class="pl-k">:</span> db,
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>messages<span class="pl-pds">'</span></span>,
  paginate<span class="pl-k">:</span> {
    default<span class="pl-k">:</span> <span class="pl-c1">2</span>,
    max<span class="pl-k">:</span> <span class="pl-c1">4</span>
  }
}))
<span class="pl-smi">app</span>.<span class="pl-en">use</span>(<span class="pl-smi">express</span>.<span class="pl-en">errorHandler</span>());

<span class="pl-c"><span class="pl-c">//</span> Clean up our data. This is optional and is here</span>
<span class="pl-c"><span class="pl-c">//</span> because of our integration tests</span>
<span class="pl-smi">db</span>.<span class="pl-smi">schema</span>.<span class="pl-en">dropTableIfExists</span>(<span
                        class="pl-s"><span class="pl-pds">'</span>messages<span class="pl-pds">'</span></span>).<span
                        class="pl-en">then</span>(() <span class="pl-k">=&gt;</span> {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>Dropped messages table<span
                            class="pl-pds">'</span></span>);

  <span class="pl-c"><span class="pl-c">//</span> Initialize your table</span>
  <span class="pl-k">return</span> <span class="pl-smi">db</span>.<span class="pl-smi">schema</span>.<span
                        class="pl-en">createTable</span>(<span class="pl-s"><span class="pl-pds">'</span>messages<span
                            class="pl-pds">'</span></span>, <span class="pl-smi">table</span> <span
                        class="pl-k">=&gt;</span> {
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>Creating messages table<span
                            class="pl-pds">'</span></span>);
    <span class="pl-smi">table</span>.<span class="pl-en">increments</span>(<span class="pl-s"><span
                            class="pl-pds">'</span>id<span class="pl-pds">'</span></span>);
    <span class="pl-smi">table</span>.<span class="pl-en">string</span>(<span class="pl-s"><span class="pl-pds">'</span>text<span
                            class="pl-pds">'</span></span>);
  });
}).<span class="pl-en">then</span>(() <span class="pl-k">=&gt;</span> {
  <span class="pl-c"><span class="pl-c">//</span> Create a dummy Message</span>
  <span class="pl-smi">app</span>.<span class="pl-en">service</span>(<span class="pl-s"><span class="pl-pds">'</span>messages<span
                            class="pl-pds">'</span></span>).<span class="pl-en">create</span>({
    text<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>Message created on server<span
                            class="pl-pds">'</span></span>
  }).<span class="pl-en">then</span>(<span class="pl-smi">message</span> <span class="pl-k">=&gt;</span> <span
                        class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span
                            class="pl-pds">'</span>Created message<span class="pl-pds">'</span></span>, message));
});

<span class="pl-c"><span class="pl-c">//</span> Start the server.</span>
<span class="pl-k">const</span> <span class="pl-c1">port</span> <span class="pl-k">=</span> <span
                        class="pl-c1">3030</span>;

<span class="pl-smi">app</span>.<span class="pl-en">listen</span>(port, () <span class="pl-k">=&gt;</span> {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">`</span>Feathers server listening on port <span
                            class="pl-s1"><span class="pl-pse">${</span>port<span class="pl-pse">}</span></span><span
                            class="pl-pds">`</span></span>);
                    });</code></pre>
        </div>
        <p>Run the example with <code>node app</code> and go to <a href="http://localhost:3030/messages" rel="nofollow">localhost:3030/messages</a>.
        </p>
        <h2><a href="#querying" aria-hidden="true" class="anchor" id="user-content-querying">
                <svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16"
                     width="16">
                    <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
                </svg>
            </a>Querying
        </h2>
        <p>In addition to the <a href="https://docs.feathersjs.com/api/databases/querying.html" rel="nofollow">common
                querying mechanism</a>, this adapter also supports:</p>
        <h3><a href="#like" aria-hidden="true" class="anchor" id="user-content-like">
                <svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16"
                     width="16">
                    <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
                </svg>
            </a>$like
        </h3>
        <p>Find all records where the value matches the given string pattern. The following query retrieves all messages
            that start with <code>Hello</code>:</p>
        <div class="highlight highlight-source-js"><pre><code class="hljs"><span class="pl-smi">app</span>.<span
                        class="pl-en">service</span>(<span class="pl-s"><span class="pl-pds">'</span>messages<span
                            class="pl-pds">'</span></span>).<span class="pl-c1">find</span>({
  query<span class="pl-k">:</span> {
    text<span class="pl-k">:</span> {
      $like<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>Hello%<span
                            class="pl-pds">'</span></span>
    }
  }
                    });</code></pre>
        </div>
        <p>Through the REST API:</p>
        <pre><code class="hljs">/messages?text[$like]=Hello%
</code></pre>
        <h3><a href="#ilike" aria-hidden="true" class="anchor" id="user-content-ilike">
                <svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16"
                     width="16">
                    <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
                </svg>
            </a>$ilike
        </h3>
        <p>For PostgreSQL only, the keywork $ilike can be used instead of $like to make the match case insensitive. The
            following query retrieves all messages that start with <code>hello</code> (case insensitive):</p>
        <div class="highlight highlight-source-js"><pre><code class="hljs"><span class="pl-smi">app</span>.<span
                        class="pl-en">service</span>(<span class="pl-s"><span class="pl-pds">'</span>messages<span
                            class="pl-pds">'</span></span>).<span class="pl-c1">find</span>({
  query<span class="pl-k">:</span> {
    text<span class="pl-k">:</span> {
      $ilike<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>hello%<span
                            class="pl-pds">'</span></span>
    }
  }
                    });</code></pre>
        </div>
        <p>Through the REST API:</p>
        <pre><code class="hljs">/messages?text[$ilike]=hello%
</code></pre>
        <h2><a href="#transaction-support" aria-hidden="true" class="anchor" id="user-content-transaction-support">
                <svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16"
                     width="16">
                    <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
                </svg>
            </a>Transaction Support
        </h2>
        <p>The Knex adapter comes with three hooks that allows to run service method calls in a transaction. They can be
            used as application wide (<code>app.hooks.js</code>) hooks or per service like this:</p>
        <div class="highlight highlight-source-js"><pre><code class="hljs"><span class="pl-c"><span class="pl-c">//</span> A common hooks file</span>
<span class="pl-k">const</span> { <span class="pl-c1">hooks</span> } <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span
                        class="pl-s"><span class="pl-pds">'</span>feathers-knex<span class="pl-pds">'</span></span>);

<span class="pl-k">const</span> { <span class="pl-c1">transaction</span> } <span class="pl-k">=</span> hooks;

<span class="pl-c1">module</span>.<span class="pl-smi">exports</span> <span class="pl-k">=</span> {
  before<span class="pl-k">:</span> {
    all<span class="pl-k">:</span> [ <span class="pl-smi">transaction</span>.<span class="pl-c1">start</span>() ],
    find<span class="pl-k">:</span> [],
    get<span class="pl-k">:</span> [],
    create<span class="pl-k">:</span> [],
    update<span class="pl-k">:</span> [],
    patch<span class="pl-k">:</span> [],
    remove<span class="pl-k">:</span> []
  },

  after<span class="pl-k">:</span> {
    all<span class="pl-k">:</span> [ <span class="pl-smi">transaction</span>.<span class="pl-en">end</span>() ],
    find<span class="pl-k">:</span> [],
    get<span class="pl-k">:</span> [],
    create<span class="pl-k">:</span> [],
    update<span class="pl-k">:</span> [],
    patch<span class="pl-k">:</span> [],
    remove<span class="pl-k">:</span> []
  },

  error<span class="pl-k">:</span> {
    all<span class="pl-k">:</span> [ <span class="pl-smi">transaction</span>.<span class="pl-en">rollback</span>() ],
    find<span class="pl-k">:</span> [],
    get<span class="pl-k">:</span> [],
    create<span class="pl-k">:</span> [],
    update<span class="pl-k">:</span> [],
    patch<span class="pl-k">:</span> [],
    remove<span class="pl-k">:</span> []
  }
                    };</code></pre>
        </div>
        <p>To use the transactions feature, you must ensure that the three hooks (start, commit and rollback) are being
            used.</p>
        <p>At the start of any request, a new transaction will be started. All the changes made during the request to
            the services that are using the <code>feathers-knex</code> will use the transaction. At the end of the
            request, if sucessful, the changes will be commited. If an error occurs, the changes will be forfeit, all
            the <code>creates</code>, <code>patches</code>, <code>updates</code> and <code>deletes</code> are not going
            to be commited.</p>
        <p>The object that contains <code>transaction</code> is stored in the <code>params.transaction</code> of each
            request.</p>
        <blockquote>
            <p><strong>Important:</strong> If you call another Knex service within a hook and want to share the
                transaction you will have to pass <code>context.params.transaction</code> in the parameters of the
                service call.</p>
        </blockquote>
        <h2><a href="#customizing-the-query" aria-hidden="true" class="anchor" id="user-content-customizing-the-query">
                <svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16"
                     width="16">
                    <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
                </svg>
            </a>Customizing the query
        </h2>
        <p>In a <code>find</code> call, <code>params.knex</code> can be passed a KnexJS query (without pagination) to
            customize the find results.</p>
        <p>Combined with <code>.createQuery({ query: {...} })</code>, which returns a new KnexJS query with the <a
                    href="https://docs.feathersjs.com/api/databases/querying.html" rel="nofollow">common filter
                criteria</a> applied, this can be used to create more complex queries. The best way to customize the
            query is in a <a href="https://docs.feathersjs.com/api/hooks.html" rel="nofollow">before hook</a> for <code>find</code>.
        </p>
        <div class="highlight highlight-source-js"><pre><code class="hljs"><span class="pl-smi">app</span>.<span
                        class="pl-en">service</span>(<span class="pl-s"><span class="pl-pds">'</span>mesages<span
                            class="pl-pds">'</span></span>).<span class="pl-en">hooks</span>({
  before<span class="pl-k">:</span> {
    <span class="pl-en">find</span>(<span class="pl-smi">context</span>) {
      <span class="pl-k">const</span> <span class="pl-c1">query</span> <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span
                        class="pl-en">createQuery</span>({ query<span class="pl-k">:</span> <span
                        class="pl-smi">context</span>.<span class="pl-smi">params</span>.<span
                        class="pl-smi">query</span> });

      <span class="pl-c"><span class="pl-c">//</span> do something with query here</span>
      <span class="pl-smi">query</span>.<span class="pl-en">orderBy</span>(<span class="pl-s"><span
                            class="pl-pds">'</span>name<span class="pl-pds">'</span></span>, <span class="pl-s"><span
                            class="pl-pds">'</span>desc<span class="pl-pds">'</span></span>);

      <span class="pl-smi">context</span>.<span class="pl-smi">params</span>.<span class="pl-smi">knex</span> <span
                        class="pl-k">=</span> query;
    }
  }
                    });</code></pre>
        </div>
        <h2><a href="#license" aria-hidden="true" class="anchor" id="user-content-license">
                <svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16"
                     width="16">
                    <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
                </svg>
            </a>License
        </h2>
        <p>Copyright (c) 2016</p>
        <p>Licensed under the <a href="https://github.com/feathersjs-ecosystem/feathers-knex/blob/master/LICENSE">MIT license</a>.</p>
    </article>
{% endblock %}
