{% extends 'layouts/sidebar.html.twig' %}

{% block sidebar_content %}
    <section class="normal markdown-section">


        <h1 id="rest-apis">REST APIs<a class="anchorjs-link " href="#rest-apis" aria-label="Anchor link for: rest apis"
                                       data-anchorjs-icon="#" style="padding-left: 0.375em;"></a></h1>
        <p>In the previous chapters we learned about Feathers <a href="https://docs.feathersjs.com/guides/basics/services.html">services</a> and <a
                    href="https://docs.feathersjs.com/guides/basics/hooks.html">hooks</a> and created a messages service that works in NodeJS and the browser. We
            saw how Feathers automatically sends events but so far we didn't really create a web API that other people
            can use.</p>
        <p>This what Feathers transports do. A transport is a plugin that turns a Feathers application into a server
            that exposes our services through different protocols for other clients to use. Since a transport involves
            running a server it won't work in the browser but we will learn later that there are complementary plugins
            for connecting to a Feathers server in a browser Feathers application.</p>
        <p>Currently Feathers officially has three transports:</p>
        <ul>
            <li><a href="https://docs.feathersjs.com/api/express.html">HTTP REST via Express</a> for exposing services through a JSON REST API
            </li>
            <li><a href="https://docs.feathersjs.com/api/socketio.html">Socket.io</a> for connecting to services through websockets and also
                receiving real-time service events
            </li>
            <li><a href="https://docs.feathersjs.com/api/primus.html">Primus</a> an alternative to Socket.io supporting several websocket
                protocols which also supports real-time events
            </li>
        </ul>
        <p>In this chapter we will look at the HTTP REST transport and Feathers Express framework integration.</p>
        <h2 id="rest-and-services">REST and services<a class="anchorjs-link " href="#rest-and-services"
                                                       aria-label="Anchor link for: rest and services"
                                                       data-anchorjs-icon="#" style="padding-left: 0.375em;"></a></h2>
        <p>One of the goals of Feathers is make building <a
                    href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank">REST APIs</a>
            easier since it is by far the most common protocol for web APIs. For example, we want to make a request like
            <code>GET /messages/1</code> and get a JSON response like <code>{ "id": 1, "text": "The first message"
                }</code>. You may already have noticed that the Feathers service methods and the HTTP methods like
            <code>GET</code>, <code>POST</code>, <code>PATCH</code> and <code>DELETE</code> are fairly complementary to
            each other:</p>
        <table>
            <thead>
            <tr>
                <th>Service method</th>
                <th>HTTP method</th>
                <th>Path</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>.find()</td>
                <td>GET</td>
                <td>/messages</td>
            </tr>
            <tr>
                <td>.get()</td>
                <td>GET</td>
                <td>/messages/1</td>
            </tr>
            <tr>
                <td>.create()</td>
                <td>POST</td>
                <td>/messages</td>
            </tr>
            <tr>
                <td>.update()</td>
                <td>PUT</td>
                <td>/messages/1</td>
            </tr>
            <tr>
                <td>.patch()</td>
                <td>PATCH</td>
                <td>/messages/1</td>
            </tr>
            <tr>
                <td>.remove()</td>
                <td>DELETE</td>
                <td>/messages/1</td>
            </tr>
            </tbody>
        </table>
        <p>What the Feathers REST transport essentially does is to automatically map our existing service methods to
            those endpoints.</p>
        <h2 id="express-integration">Express integration<a class="anchorjs-link " href="#express-integration"
                                                           aria-label="Anchor link for: express integration"
                                                           data-anchorjs-icon="#" style="padding-left: 0.375em;"></a>
        </h2>
        <p><a href="http://expressjs.com/" target="_blank">Express</a> is probably the most popular Node framework for
            creating web applications and APIs. The <a href="https://docs.feathersjs.com/api/express.html">Feathers Express integration</a>
            allows us to turn a Feathers application into an application that is both a Feathers application and a fully
            compatible Express application. This means you can use Feathers functionality like services but also any
            existing Express middleware. As mentioned before, the Express framework integration only works on the
            server.</p>
        <p>To add the integration we install <code>@feathersjs/express</code>:</p>
        <pre><code>npm install @feathersjs/express --save
</code></pre>
        <p>Then we can initialize a Feathers and Express application that exposes services as a REST API on port <code>3030</code>
            like this:</p>
        <pre><code class="lang-js"><span class="hljs-keyword">const</span> feathers = <span class="hljs-built_in">require</span>(<span
                        class="hljs-string">'@feathersjs/feathers'</span>);
<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'@feathersjs/express'</span>);

<span class="hljs-comment">// This creates an app that is both, an Express and Feathers app</span>
<span class="hljs-keyword">const</span> app = express(feathers());

<span class="hljs-comment">// Turn on JSON body parsing for REST services</span>
app.use(express.json())
<span class="hljs-comment">// Turn on URL-encoded body parsing for REST services</span>
app.use(express.urlencoded({ extended: <span class="hljs-literal">true</span> }));
<span class="hljs-comment">// Set up REST transport using Express</span>
app.configure(express.rest());

<span class="hljs-comment">// Set up an error handler that gives us nicer errors</span>
app.use(express.errorHandler());

<span class="hljs-comment">// Start the server on port 3030</span>
app.listen(<span class="hljs-number">3030</span>);
</code></pre>
        <p><code>express.json</code>, <code>express.urlencoded</code> and <code>express.errorHandler</code> is a normal
            Express middleware. We can still also use <code>app.use</code> to register a Feathers service though.</p>
        <blockquote>
            <p><strong>Pro tip:</strong> You can find more information about the Express framework integration in the <a
                        href="https://docs.feathersjs.com/api/express.html">Express API chapter</a>.</p>
        </blockquote>
        <h2 id="a-messages-rest-api">A messages REST API<a class="anchorjs-link " href="#a-messages-rest-api"
                                                           aria-label="Anchor link for: a messages rest api"
                                                           data-anchorjs-icon="#" style="padding-left: 0.375em;"></a>
        </h2>
        <p>The code above is really all we need to turn our messages service into a REST API. Here is the complete code
            for our <code>app.js</code> exposing the service from the <a href="https://docs.feathersjs.com/guides/basics/services.html">services chapter</a>
            through a REST API:</p>
        <pre><code class="lang-js"><span class="hljs-keyword">const</span> feathers = <span class="hljs-built_in">require</span>(<span
                        class="hljs-string">'@feathersjs/feathers'</span>);
<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'@feathersjs/express'</span>);

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Messages</span> </span>{
  <span class="hljs-keyword">constructor</span>() {
    <span class="hljs-keyword">this</span>.messages = [];
    <span class="hljs-keyword">this</span>.currentId = <span class="hljs-number">0</span>;
  }

  <span class="hljs-keyword">async</span> find(params) {
    <span class="hljs-comment">// Return the list of all messages</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.messages;
  }

  <span class="hljs-keyword">async</span> get(id, params) {
    <span class="hljs-comment">// Find the message by id</span>
    <span class="hljs-keyword">const</span> message = <span class="hljs-keyword">this</span>.messages.find(message =&gt; message.id === <span
                        class="hljs-built_in">parseInt</span>(id, <span class="hljs-number">10</span>));

    <span class="hljs-comment">// Throw an error if it wasn't found</span>
    <span class="hljs-keyword">if</span>(!message) {
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span
                        class="hljs-built_in">Error</span>(<span class="hljs-string">`Message with id <span
                            class="hljs-subst">${id}</span> not found`</span>);
    }

    <span class="hljs-comment">// Otherwise return the message</span>
    <span class="hljs-keyword">return</span> message;
  }

  <span class="hljs-keyword">async</span> create(data, params) {
    <span class="hljs-comment">// Create a new object with the original data and an id</span>
    <span class="hljs-comment">// taken from the incrementing `currentId` counter</span>
    <span class="hljs-keyword">const</span> message = <span class="hljs-built_in">Object</span>.assign({
      id: ++<span class="hljs-keyword">this</span>.currentId
    }, data);

    <span class="hljs-keyword">this</span>.messages.push(message);

    <span class="hljs-keyword">return</span> message;
  }

  <span class="hljs-keyword">async</span> patch(id, data, params) {
    <span class="hljs-comment">// Get the existing message. Will throw an error if not found</span>
    <span class="hljs-keyword">const</span> message = <span class="hljs-keyword">await</span> <span
                        class="hljs-keyword">this</span>.get(id);

    <span class="hljs-comment">// Merge the existing message with the new data</span>
    <span class="hljs-comment">// and return the result</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.assign(message, data);
  }

  <span class="hljs-keyword">async</span> remove(id, params) {
    <span class="hljs-comment">// Get the message by id (will throw an error if not found)</span>
    <span class="hljs-keyword">const</span> message = <span class="hljs-keyword">await</span> <span
                        class="hljs-keyword">this</span>.get(id);
    <span class="hljs-comment">// Find the index of the message in our message array</span>
    <span class="hljs-keyword">const</span> index = <span class="hljs-keyword">this</span>.messages.indexOf(message);

    <span class="hljs-comment">// Remove the found message from our array</span>
    <span class="hljs-keyword">this</span>.messages.splice(index, <span class="hljs-number">1</span>);

    <span class="hljs-comment">// Return the removed message</span>
    <span class="hljs-keyword">return</span> message;
  }
}

<span class="hljs-keyword">const</span> app = express(feathers());

<span class="hljs-comment">// Turn on JSON body parsing for REST services</span>
app.use(express.json())
<span class="hljs-comment">// Turn on URL-encoded body parsing for REST services</span>
app.use(express.urlencoded({ extended: <span class="hljs-literal">true</span> }));
<span class="hljs-comment">// Set up REST transport using Express</span>
app.configure(express.rest());

<span class="hljs-comment">// Initialize the messages service by creating</span>
<span class="hljs-comment">// a new instance of our class</span>
app.use(<span class="hljs-string">'messages'</span>, <span class="hljs-keyword">new</span> Messages());

<span class="hljs-comment">// Set up an error handler that gives us nicer errors</span>
app.use(express.errorHandler());

<span class="hljs-comment">// Start the server on port 3030</span>
<span class="hljs-keyword">const</span> server = app.listen(<span class="hljs-number">3030</span>);

<span class="hljs-comment">// Use the service to create a new message on the server</span>
app.service(<span class="hljs-string">'messages'</span>).create({
  text: <span class="hljs-string">'Hello from the server'</span>
});

server.on(<span class="hljs-string">'listening'</span>, () =&gt; <span class="hljs-built_in">console</span>.log(<span
                        class="hljs-string">'Feathers REST API started at http://localhost:3030'</span>));
</code></pre>
        <p>You can start the server by running</p>
        <pre><code>node app.js
</code></pre>
        <blockquote>
            <p><strong>Note:</strong> The server will stay running until you stop it by pressing Control + C in the
                terminal. Remember to stop and start the server every time <code>app.js</code> changes.</p>
        </blockquote>
        <!-- -->
        <blockquote>
            <p><strong>Important:</strong> In Express an error handler, here
                <code>app.use(express.errorHandler());</code>, always has to be the last line before starting the
                server.</p>
        </blockquote>
        <h2 id="using-the-api">Using the API<a class="anchorjs-link " href="#using-the-api"
                                               aria-label="Anchor link for: using the api" data-anchorjs-icon="#"
                                               style="padding-left: 0.375em;"></a></h2>
        <p>Once the server is running the first thing we can do is hit <a href="http://localhost:3030/messages"
                                                                          target="_blank">localhost:3030/messages</a> in
            the browser. Since we already created a message on the server, the JSON repsonse will look like this:</p>
        <pre><code class="lang-js">[{<span class="hljs-string">"id"</span>:<span class="hljs-number">1</span>,<span
                        class="hljs-string">"text"</span>:<span class="hljs-string">"Hello from the server"</span>}]
</code></pre>
        <p>We can also retrieve that specific message by going to <a href="http://localhost:3030/messages/1"
                                                                     target="_blank">localhost:3030/messages/1</a>.</p>
        <blockquote>
            <p><strong>Pro Tip:</strong> A browser plugin like <a
                        href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh"
                        target="_blank">JSON viewer for Chrome</a> makes it much nicer to view JSON responses.</p>
        </blockquote>
        <p>New messages can now be created by sending a POST request with JSON data to the same URL. Using CURL on the
            command line like this:</p>
        <pre><code>curl 'http://localhost:3030/messages/' -H 'Content-Type: application/json' --data-binary '{ "text": "Hello from the command line!" }'
</code></pre>
        <blockquote>
            <p><strong>Note:</strong> You can also use tools like <a href="https://www.getpostman.com/" target="_blank">Postman</a>
                to make HTTP requests.</p>
        </blockquote>
        <p>If you now refresh <a href="http://localhost:3030/messages" target="_blank">localhost:3030/messages</a> you
            will see the newly created message.</p>
        <p>We can also remove a message by sending a <code>DELETE</code> to its URL:</p>
        <pre><code>curl -X "DELETE" http://localhost:3030/messages/1
</code></pre>
    </section>
{% endblock %}
