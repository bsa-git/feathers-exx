{% extends 'layouts/sidebar.html.twig' %}

{% block sidebar_content %}
    <section class="normal markdown-section">


        <h1 id="client-use">Client use<a class="anchorjs-link " href="#client-use"
                                         aria-label="Anchor link for: client use" data-anchorjs-icon="#"
                                         style="padding-left: 0.375em;"></a></h1>
        <p>So far, we have seen that Feathers with its services, events and hooks can also be used in the browser, which
            is a very unique feature. By implementing custom services that talk to an API in the browser, Feathers
            allows us to structure any client-side application with any framework. </p>
        <p>This is exactly what Feathers client-side services do. In order to connect to a Feathers server, a client
            creates Services that use a REST or websocket connection to relay method calls and allow listening to events
            from the server. This means that we can use a client-side Feathers application to transparently talk to a
            Feathers server the same way we'd use it locally (as we've done in previous examples)!</p>
        <blockquote>
            <p><strong>Note:</strong> The following examples demonstrate using the Feathers client through a <code>&lt;script&gt;</code>
                tag. For more information on using a module loader like Webpack or Browserify and loading individual
                modules see the <a href="https://docs.feathersjs.com/api/client.html">client API documentation</a>.</p>
        </blockquote>
        <h2 id="real-time-client">Real-time client<a class="anchorjs-link " href="#real-time-client"
                                                     aria-label="Anchor link for: real time client"
                                                     data-anchorjs-icon="#" style="padding-left: 0.375em;"></a></h2>
        <p>In the <a href="real-time.html">real-time chapter</a> we saw an example of how to directly use a websocket
            connection to make service calls and listen to events. We can also use a browser Feathers application and
            client services that use this connection. Let's update <code>public/client.js</code> to:</p>
        <pre><code class="lang-js"><span
                        class="hljs-comment">// Create a websocket connecting to our Feathers server</span>
<span class="hljs-keyword">const</span> socket = io(<span class="hljs-string">'http://localhost:3030'</span>);
<span class="hljs-comment">// Create a Feathers application</span>
<span class="hljs-keyword">const</span> app = feathers();
<span class="hljs-comment">// Configure Socket.io client services to use that socket</span>
app.configure(feathers.socketio(socket));

app.service(<span class="hljs-string">'messages'</span>).on(<span class="hljs-string">'created'</span>, message =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Someone created a message'</span>, message);
});

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span
                            class="hljs-title">createAndList</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">await</span> app.service(<span class="hljs-string">'messages'</span>).create({
    text: <span class="hljs-string">'Hello from Feathers browser client'</span>
  });

  <span class="hljs-keyword">const</span> messages = <span class="hljs-keyword">await</span> app.service(<span
                        class="hljs-string">'messages'</span>).find();

  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Messages'</span>, messages);
}

createAndList();
</code></pre>
        <h2 id="rest-client">REST client<a class="anchorjs-link " href="#rest-client"
                                           aria-label="Anchor link for: rest client" data-anchorjs-icon="#"
                                           style="padding-left: 0.375em;"></a></h2>
        <p>We can also create services that communicate via REST using many different Ajax libraries like <a
                    href="https://jquery.com" target="_blank">jQuery</a> or <a href="https://github.com/axios/axios"
                                                                               target="_blank">Axios</a>. For this
            example, we will use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank">fetch</a>
            since it's built-in modern browsers.</p>
        <blockquote>
            <p><strong>Important:</strong> REST services can only emit real-time events locally, to themselves. REST
                does not support real-time updates from the server.</p>
        </blockquote>
        <p>Since we are making a cross-domain request, we first have to enable <a
                    href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank">Cross-Origin Resource
                sharing (CORS)</a> on the server. Update <code>app.js</code> to:</p>
        <pre><code class="lang-js"><span class="hljs-keyword">const</span> feathers = <span class="hljs-built_in">require</span>(<span
                        class="hljs-string">'@feathersjs/feathers'</span>);
<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'@feathersjs/express'</span>);
<span class="hljs-keyword">const</span> socketio = <span class="hljs-built_in">require</span>(<span class="hljs-string">'@feathersjs/socketio'</span>);
<span class="hljs-keyword">const</span> memory = <span class="hljs-built_in">require</span>(<span class="hljs-string">'feathers-memory'</span>);

<span class="hljs-comment">// This creates an app that's both an Express and Feathers app</span>
<span class="hljs-keyword">const</span> app = express(feathers());

<span class="hljs-comment">// Enable CORS</span>
app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span
                            class="hljs-params">req, res, next</span>) </span>{
  res.header(<span class="hljs-string">'Access-Control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>);
  res.header(<span class="hljs-string">'Access-Control-Allow-Headers'</span>, <span class="hljs-string">'Origin, X-Requested-With, Content-Type, Accept'</span>);
  next();
});

<span class="hljs-comment">// Turn on JSON body parsing for REST services</span>
app.use(express.json())
<span class="hljs-comment">// Turn on URL-encoded body parsing for REST services</span>
app.use(express.urlencoded({ extended: <span class="hljs-literal">true</span> }));
<span class="hljs-comment">// Set up REST transport using Express</span>
app.configure(express.rest());

<span class="hljs-comment">// Configure the Socket.io transport</span>
app.configure(socketio());

<span class="hljs-comment">// On any real-time connection, add it to the 'everybody' channel</span>
app.on(<span class="hljs-string">'connection'</span>, connection =&gt; app.channel(<span
                        class="hljs-string">'everybody'</span>).join(connection));

<span class="hljs-comment">// Publish all events to the 'everybody' channel</span>
app.publish(() =&gt; app.channel(<span class="hljs-string">'everybody'</span>));

<span class="hljs-comment">// Initialize the messages service</span>
app.use(<span class="hljs-string">'messages'</span>, memory({
  paginate: {
    <span class="hljs-keyword">default</span>: <span class="hljs-number">10</span>,
    max: <span class="hljs-number">25</span>
  }
}));

<span class="hljs-comment">// Set up an error handler that gives us nicer errors</span>
app.use(express.errorHandler());

<span class="hljs-comment">// Start the server on port 3030</span>
<span class="hljs-keyword">const</span> server = app.listen(<span class="hljs-number">3030</span>);

server.on(<span class="hljs-string">'listening'</span>, () =&gt; <span class="hljs-built_in">console</span>.log(<span
                        class="hljs-string">'Feathers API started at localhost:3030'</span>));
</code></pre>
        <blockquote>
            <p><strong>Note:</strong> This is just a basic middleware setting the headers. In production (and
                applications created by the Feathers generator) we will use the <a
                        href="https://github.com/expressjs/cors" target="_blank">cors</a> module.</p>
        </blockquote>
        <p>Then we can update <code>public/client.js</code> to:</p>
        <pre><code class="lang-js"><span class="hljs-comment">// Create a Feathers application</span>
<span class="hljs-keyword">const</span> app = feathers();
<span class="hljs-comment">// Initialize a REST connection</span>
<span class="hljs-keyword">const</span> rest = feathers.rest(<span class="hljs-string">'http://localhost:3030'</span>);
<span class="hljs-comment">// Configure the REST client to use 'window.fetch'</span>
app.configure(rest.fetch(<span class="hljs-built_in">window</span>.fetch));

app.service(<span class="hljs-string">'messages'</span>).on(<span class="hljs-string">'created'</span>, message =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Created a new message locally'</span>, message);
});

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span
                            class="hljs-title">createAndList</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">await</span> app.service(<span class="hljs-string">'messages'</span>).create({
    text: <span class="hljs-string">'Hello from Feathers browser client'</span>
  });

  <span class="hljs-keyword">const</span> messages = <span class="hljs-keyword">await</span> app.service(<span
                        class="hljs-string">'messages'</span>).find();

  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Messages'</span>, messages);
}

createAndList();
</code></pre>
    </section>
{% endblock %}
