{% extends 'layouts/sidebar.html.twig' %}

{% block sidebar_content %}
    <section class="normal markdown-section">


        <h1 id="local-authentication">Authentication<a class="anchorjs-link " href="#local-authentication"
                                                             aria-label="Anchor link for: local authentication"
                                                             data-anchorjs-icon="#" style="padding-left: 0.375em;"></a>
        </h1>
        <pre><code>$ npm install @feathersjs/authentication-local --save
</code></pre>
        <p><a href="https://github.com/feathersjs/authentication-local"
              target="_blank">@feathersjs/authentication-local</a> is a server side module that wraps the <a
                    href="https://github.com/jaredhanson/passport-local" target="_blank">passport-local</a>
            authentication strategy, which lets you authenticate with your Feathers application using a username and
            password.</p>
        <p>This module contains 3 core pieces:</p>
        <ol>
            <li>The main initialization function</li>
            <li>The <code>hashPassword</code> hook</li>
            <li>The <code>Verifier</code> class</li>
        </ol>
        <h2 id="configuration">Configuration<a class="anchorjs-link " href="#configuration"
                                               aria-label="Anchor link for: configuration" data-anchorjs-icon="#"
                                               style="padding-left: 0.375em;"></a></h2>
        <p>In most cases initializing the module is as simple as doing this:</p>
        <pre><code class="lang-js"><span class="hljs-keyword">const</span> feathers = <span class="hljs-built_in">require</span>(<span
                        class="hljs-string">'@feathersjs/feathers'</span>);
<span class="hljs-keyword">const</span> authentication = <span class="hljs-built_in">require</span>(<span
                        class="hljs-string">'@feathersjs/authentication'</span>);
<span class="hljs-keyword">const</span> local = <span class="hljs-built_in">require</span>(<span class="hljs-string">'@feathersjs/authentication-local'</span>);
<span class="hljs-keyword">const</span> app = feathers();

<span class="hljs-comment">// Setup authentication</span>
app.configure(authentication(settings));
app.configure(local());

<span class="hljs-comment">// Setup a hook to only allow valid JWTs or successful </span>
<span class="hljs-comment">// local auth to authenticate and get new JWT access tokens</span>
app.service(<span class="hljs-string">'authentication'</span>).hooks({
  before: {
    create: [
      authentication.hooks.authenticate([<span class="hljs-string">'local'</span>, <span
                        class="hljs-string">'jwt'</span>])
    ]
  }
});
</code></pre>
        <p>This will pull from your global authentication object in your config file. It will also mix in the following
            defaults, which can be customized.</p>
        <h2 id="options">Options<a class="anchorjs-link " href="#options" aria-label="Anchor link for: options"
                                   data-anchorjs-icon="#" style="padding-left: 0.375em;"></a></h2>
        <pre><code class="lang-js">{
    name: <span class="hljs-string">'local'</span>, <span class="hljs-comment">// the name to use when invoking the authentication Strategy</span>
    entity: <span class="hljs-string">'user'</span>, <span class="hljs-comment">// the entity that you're comparing username/password against</span>
    service: <span class="hljs-string">'users'</span>, <span
                        class="hljs-comment">// the service to look up the entity</span>
    usernameField: <span class="hljs-string">'email'</span>, <span
                        class="hljs-comment">// key name of username field</span>
    passwordField: <span class="hljs-string">'password'</span>, <span
                        class="hljs-comment">// key name of password field</span>
    entityUsernameField: <span class="hljs-string">'email'</span>, <span class="hljs-comment">// key name of the username field on the entity (defaults to `usernameField`) </span>
    entityPasswordField: <span class="hljs-string">'password'</span>, <span class="hljs-comment">// key name of the password on the entity (defaults to `passwordField`) </span>
    passReqToCallback: <span class="hljs-literal">true</span>, <span class="hljs-comment">// whether the request object should be passed to `verify`</span>
    session: <span class="hljs-literal">false</span> <span class="hljs-comment">// whether to use sessions,</span>
    Verifier: Verifier <span class="hljs-comment">// A Verifier class. Defaults to the built-in one but can be a custom one. See below for details.</span>
}
</code></pre>
        <blockquote>
            <p><strong>Important:</strong> When setting the <code>usernameField</code> to <code>username</code> in the
                <a href="https://docs.feathersjs.com/api/configuration.html">configuration</a> the value <em>must</em> be escaped as
                <code>\\username</code> otherwise it will use the value of the <code>username</code> environment
                variable on Windows systems.</p>
        </blockquote>
        <h2 id="hooks">hooks<a class="anchorjs-link " href="#hooks" aria-label="Anchor link for: hooks"
                               data-anchorjs-icon="#" style="padding-left: 0.375em;"></a></h2>
        <h3 id="hashpassword">hashPassword<a class="anchorjs-link " href="#hashpassword"
                                             aria-label="Anchor link for: hashpassword" data-anchorjs-icon="#"
                                             style="padding-left: 0.375em;"></a></h3>
        <p>This hook is used to hash plain text passwords before they are saved to the database. It uses the bcrypt
            algorithm by default but can be customized by passing your own <code>options.hash</code> function.</p>
        <blockquote>
            <p><strong>Important:</strong> <code>@feathersjs/authentication-local</code> does not allow to store clear
                text passwords. This means the <code>hashPassword</code> hook <strong>must</strong> be used when using
                the <a href="#verifier">standard verifier</a>.</p>
        </blockquote>
        <p>Available options are</p>
        <ul>
            <li><code>passwordField</code> (default: <code>'password'</code>) - key name of password field to look on
                context.data
            </li>
            <li><code>hash</code> (default: bcrypt hash function) - Takes in a password and returns a hash.</li>
        </ul>
        <pre><code class="lang-js"><span class="hljs-keyword">const</span> local = <span
                        class="hljs-built_in">require</span>(<span class="hljs-string">'@feathersjs/authentication-local'</span>);

app.service(<span class="hljs-string">'users'</span>).hooks({
  before: {
    create: [
      local.hooks.hashPassword()
    ]
  }
});
</code></pre>
        <h3 id="protect">protect<a class="anchorjs-link " href="#protect" aria-label="Anchor link for: protect"
                                   data-anchorjs-icon="#" style="padding-left: 0.375em;"></a></h3>
        <p>The protect hook makes sure that protected fields don't get sent to a client.</p>
        <pre><code class="lang-js"><span class="hljs-keyword">const</span> local = <span
                        class="hljs-built_in">require</span>(<span class="hljs-string">'@feathersjs/authentication-local'</span>);

app.service(<span class="hljs-string">'users'</span>).hooks({
  after: {
    create: [
      local.hooks.protect(<span class="hljs-string">'password'</span>)
    ]
  }
});
</code></pre>
        <h2 id="verifier">Verifier<a class="anchorjs-link " href="#verifier" aria-label="Anchor link for: verifier"
                                     data-anchorjs-icon="#" style="padding-left: 0.375em;"></a></h2>
        <p>This is the verification class that does the actual username and password verification by looking up the
            entity (normally a <code>user</code>) on a given service by the <code>usernameField</code> and compares the
            hashed password using bcrypt. It has the following methods that can all be overridden. All methods return a
            promise except <code>verify</code>, which has the exact same signature as <a
                    href="https://github.com/jaredhanson/passport-local" target="_blank">passport-local</a>.</p>
        <pre><code class="lang-js">{
    <span class="hljs-keyword">constructor</span>(app, options) // the class <span
                        class="hljs-keyword">constructor</span>
    _comparePassword(entity, password) // compares password using bcrypt
    _normalizeResult(result) // normalizes result from service to account for pagination
    verify(req, username, password, done) // queries the service and calls the other internal functions.
}
</code></pre>
        <p>The <code>Verifier</code> class can be extended so that you customize it's behavior without having to rewrite
            and test a totally custom local Passport implementation. Although that is always an option if you don't want
            use this plugin.</p>
        <p>An example of customizing the Verifier:</p>
        <pre><code class="lang-js"><span class="hljs-keyword">import</span> local, { Verifier } <span
                        class="hljs-keyword">from</span> <span
                        class="hljs-string">'@feathersjs/authentication-local'</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomVerifier</span> <span
            class="hljs-keyword">extends</span> <span class="hljs-title">Verifier</span> </span>{
  <span class="hljs-comment">// The verify function has the exact same inputs and </span>
  <span class="hljs-comment">// return values as a vanilla passport strategy</span>
  verify(req, username, password, done) {
    <span class="hljs-comment">// do your custom stuff. You can call internal Verifier methods</span>
    <span class="hljs-comment">// and reference this.app and this.options. This method must be implemented.</span>

    <span class="hljs-comment">// the 'user' variable can be any truthy value</span>
    <span class="hljs-comment">// the 'payload' is the payload for the JWT access token that is generated after successful authentication</span>
    done(<span class="hljs-literal">null</span>, user, payload);
  }
}

app.configure(local({ Verifier: CustomVerifier }));
</code></pre>
        <h2 id="client-usage">Client Usage<a class="anchorjs-link " href="#client-usage"
                                             aria-label="Anchor link for: client usage" data-anchorjs-icon="#"
                                             style="padding-left: 0.375em;"></a></h2>
        <h3 id="authentication-client">authentication-client<a class="anchorjs-link " href="#authentication-client"
                                                               aria-label="Anchor link for: authentication client"
                                                               data-anchorjs-icon="#"
                                                               style="padding-left: 0.375em;"></a></h3>
        <p>When this module is registered server side, using the default config values this is how you can authenticate
            using <a href="https://docs.feathersjs.com/api/authentication/client.html">@feathersjs/authentication-client</a>:</p>
        <pre><code class="lang-js">app.authenticate({
  strategy: <span class="hljs-string">'local'</span>,
  email: <span class="hljs-string">'your email'</span>,
  password: <span class="hljs-string">'your password'</span>
}).then(response =&gt; {
  <span class="hljs-comment">// You are now authenticated</span>
});
</code></pre>
        <h3 id="http-request">HTTP Request<a class="anchorjs-link " href="#http-request"
                                             aria-label="Anchor link for: http request" data-anchorjs-icon="#"
                                             style="padding-left: 0.375em;"></a></h3>
        <p>If you are not using the <code>@feathersjs/authentication-client</code> and you have registered this module
            server side, make a <code>POST</code> request to <code>/authentication</code> with the following payload:
        </p>
        <pre><code class="lang-json"><span class="hljs-comment">// POST /authentication the Content-Type header set to application/json</span>
{
  <span class="hljs-string">"strategy"</span>: <span class="hljs-string">"local"</span>,
  <span class="hljs-string">"email"</span>: <span class="hljs-string">"your email"</span>,
  <span class="hljs-string">"password"</span>: <span class="hljs-string">"your password"</span>
}
</code></pre>
        <p>Here is what that looks like with curl:</p>
        <pre><code class="lang-bash">curl -H <span
                        class="hljs-string">"Content-Type: application/json"</span> -X POST <span
                        class="hljs-_">-d</span> <span class="hljs-string">'{"strategy":"local","email":"your email","password":"your password"}'</span> http://localhost:3030/authentication
</code></pre>
        <h3 id="sockets">Sockets<a class="anchorjs-link " href="#sockets" aria-label="Anchor link for: sockets"
                                   data-anchorjs-icon="#" style="padding-left: 0.375em;"></a></h3>
        <p>Authenticating using a local strategy via sockets is done by emitting the following message:</p>
        <pre><code class="lang-js"><span class="hljs-keyword">const</span> io = <span
                        class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io-client'</span>);
<span class="hljs-keyword">const</span> socket = io(<span class="hljs-string">'http://localhost:3030'</span>);

socket.emit(<span class="hljs-string">'authenticate'</span>, {
  strategy: <span class="hljs-string">'local'</span>,
  email: <span class="hljs-string">'your email'</span>,
  password: <span class="hljs-string">'your password'</span>
}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message, data</span>) </span>{
  <span class="hljs-built_in">console</span>.log(message); <span class="hljs-comment">// message will be null</span>
  <span class="hljs-built_in">console</span>.log(data); <span class="hljs-comment">// data will be {"accessToken": "your token"}</span>
  <span class="hljs-comment">// You can now send authenticated messages to the server</span>
});
</code></pre>
    </section>
{% endblock %}
